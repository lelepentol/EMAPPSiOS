<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" ignored="0" total="4" passed="4">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="478081" started-at="2020-07-21T10:40:00 WIB" finished-at="2020-07-21T10:47:58 WIB">
    <groups>
    </groups>
    <test name="Default test" duration-ms="478081" started-at="2020-07-21T10:40:00 WIB" finished-at="2020-07-21T10:47:58 WIB">
      <class name="tests.MyCreateEvent">
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:tests.MyCreateEvent@27808f31]" name="beforeSuite" is-config="true" duration-ms="230" started-at="2020-07-21T10:39:59 WIB" finished-at="2020-07-21T10:40:00 WIB">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="setup()[pri:0, instance:tests.MyCreateEvent@27808f31]" name="setup" is-config="true" duration-ms="128841" started-at="2020-07-21T10:40:00 WIB" finished-at="2020-07-21T10:42:08 WIB">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.MyCreateEvent@27808f31]" name="beforeMethod" is-config="true" duration-ms="5" started-at="2020-07-21T10:42:08 WIB" finished-at="2020-07-21T10:42:08 WIB">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.MyCreateEvent.createEvent()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="createEvent()[pri:1, instance:tests.MyCreateEvent@27808f31]" name="createEvent" duration-ms="158216" started-at="2020-07-21T10:42:08 WIB" finished-at="2020-07-21T10:44:47 WIB">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createEvent -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:tests.MyCreateEvent@27808f31]" name="getResult" is-config="true" duration-ms="3" started-at="2020-07-21T10:44:47 WIB" finished-at="2020-07-21T10:44:47 WIB">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createEvent status=SUCCESS method=MyCreateEvent.createEvent()[pri:1, instance:tests.MyCreateEvent@27808f31] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void tests.MyCreateEvent.createEvent()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.MyCreateEvent@27808f31]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-07-21T10:44:47 WIB" finished-at="2020-07-21T10:44:47 WIB">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.MyCreateEvent.readEvent()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="readEvent()[pri:2, instance:tests.MyCreateEvent@27808f31]" name="readEvent" duration-ms="7959" started-at="2020-07-21T10:44:47 WIB" finished-at="2020-07-21T10:44:55 WIB">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- readEvent -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:tests.MyCreateEvent@27808f31]" name="getResult" is-config="true" duration-ms="0" started-at="2020-07-21T10:44:55 WIB" finished-at="2020-07-21T10:44:55 WIB">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=readEvent status=SUCCESS method=MyCreateEvent.readEvent()[pri:2, instance:tests.MyCreateEvent@27808f31] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void tests.MyCreateEvent.readEvent()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="updateEvent()[pri:3, instance:tests.MyCreateEvent@27808f31]" name="updateEvent" duration-ms="126624" started-at="2020-07-21T10:44:55 WIB" finished-at="2020-07-21T10:47:01 WIB">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateEvent -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.MyCreateEvent@27808f31]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-07-21T10:44:55 WIB" finished-at="2020-07-21T10:44:55 WIB">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.MyCreateEvent.updateEvent()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:tests.MyCreateEvent@27808f31]" name="getResult" is-config="true" duration-ms="3" started-at="2020-07-21T10:47:01 WIB" finished-at="2020-07-21T10:47:01 WIB">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateEvent status=SUCCESS method=MyCreateEvent.updateEvent()[pri:3, instance:tests.MyCreateEvent@27808f31] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void tests.MyCreateEvent.updateEvent()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.MyCreateEvent@27808f31]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-07-21T10:47:01 WIB" finished-at="2020-07-21T10:47:01 WIB">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.MyCreateEvent.cancelEvent()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="cancelEvent()[pri:4, instance:tests.MyCreateEvent@27808f31]" name="cancelEvent" duration-ms="56368" started-at="2020-07-21T10:47:01 WIB" finished-at="2020-07-21T10:47:58 WIB">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cancelEvent -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:tests.MyCreateEvent@27808f31]" name="getResult" is-config="true" duration-ms="1" started-at="2020-07-21T10:47:58 WIB" finished-at="2020-07-21T10:47:58 WIB">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=cancelEvent status=SUCCESS method=MyCreateEvent.cancelEvent()[pri:4, instance:tests.MyCreateEvent@27808f31] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void tests.MyCreateEvent.cancelEvent()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="teardown()[pri:0, instance:tests.MyCreateEvent@27808f31]" name="teardown" is-config="true" duration-ms="1041" started-at="2020-07-21T10:47:58 WIB" finished-at="2020-07-21T10:47:59 WIB">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.MyCreateEvent@27808f31]" name="endReport" is-config="true" duration-ms="276" started-at="2020-07-21T10:47:59 WIB" depends-on-methods="pages.BaseClass.teardown" finished-at="2020-07-21T10:47:59 WIB">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
      </class> <!-- tests.MyCreateEvent -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
